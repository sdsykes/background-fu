h1. BackgroundFu

* http://github.com/sdsykes/background-fu
* git://github.com/sdsykes/background-fu.git

This is a fork of:

* http://github.com/ncr/background-fu
* git://github.com/ncr/background-fu.git
* http://trix.lighthouseapp.com/projects/9809-backgroundfu
* ncr@trix.pl
* http://trix.pl

h2. Description

Background tasks in Ruby On Rails made dead simple.

h2. What's new in this fork?

* Crontab like job scheduling through the configuration file
* Output to own background log file
* Multiple job run methods - normal, thread or process
* Exception notification by email
* Fixes for threading issues
* Improved documentation

h2. BackgroundFu standard features

* Runs long tasks outside of request-response cycle.
* Very easy to setup and fun to use (See examples below). 
* Clean and straightforward approach.
* Uses database table (migration included) to store jobs reliably.
* Capistrano tasks included.
* Generators with migrations and example views included.
* Multiple worker daemons available.
* Easy to deploy in distributed environments.
* Enables prioritizing and simple scheduling.
* Optional worker monitoring (good for AJAX progress bars).
* Proven its stability and reliability in production use.

h2. Start here

h3. Requirements

* rails: version 2.1 or above.
* daemons: sudo gem install daemons

h3. Installation

* As a Rails plugin: ./script/plugin install git://github.com/sdsykes/background-fu.git
* As as a gem to be 'vendorized' starting from Rails 2.1: refer to documentation on rake gems:unpack:dependencies.

h2. Synopsis

<pre>
  ruby ./script/generate background
  rake db:migrate
  
  # to run in production mode use RAILS_ENV=production ruby ./script/daemons start
  ruby ./script/daemons start

  # then try in console:
    
  job_id = Job.enqueue!(ExampleWorker, :add, 1, 2).id

  # after few seconds when background daemon completes the job

  Job.find(job_id).result # result of the job should equal 3
</pre>  

If you want to use default generated views, update your config/routes.rb:
  
<pre>
  map.namespace "admin" do |admin|
    admin.resources :jobs
  end
</pre>

Then you can point your browser to http://localhost:3000/admin/jobs

h2. Example code - workers

Worker classes go in lib/workers.  They are just plain ruby classes that will be instantiated and have methods called on them by the background runner.

<pre>
  # lib/workers/example_worker.rb

  # Simple, non-monitored worker.
  class ExampleWorker
    def add(a, b)
      a + b
    end
  end
</pre>

Run this worker like this:

<pre>
  Job.enqueue!(ExampleWorker, :add, 1, 2)
</pre>

Workers can record their progress, and this can be monitored by your application by reading from the database.

<pre>
  # lib/workers/example_monitored_worker.rb:

  # Remember to include BackgroundFu::WorkerMonitoring.
  class ExampleMonitoredWorker
   include BackgroundFu::WorkerMonitoring

    def long_and_monitored
      my_progress = 0
  
      record_progress(my_progress)

      while my_progress < 100
        my_progress += 1
        record_progress(my_progress)
        sleep 1
      end
  
      record_progress(100)
    end
  end
</pre>
  
Note that Job is just a regular ActiveRecord model.  Run this worker like this:

<pre>
  job = Job.enqueue!(ExampleMonitoredWorker, :long_and_monitored)
  while job.reload.progress.to_i < 100
    puts "Progress: #{job.progress}"
    sleep 2
  end
</pre>

h2. Special instance variables

h3. @progress

When you call record_progress from your worker, it sets the value in @progress.  Note that although you can, it is not recommended to set the value directly because calling record_progress also performs a check to see if a stop message has been sent (if job.stop! has been called).  So calling record_progress also acts as a point your worker can abort if you are using the stop! mechanism.

h3. @last_run_time

This instance variable will automatically be set to time that the worker was initialized the last time it was run.  This may be helpful in the case of scheduled jobs.

h3. @logger

This is the Logger object that is used by BackgroundFu to write to its log.  You can send logging information there also by using this instance variable.

<pre>
  @logger.info "My worker did something interesting"
</pre>



h2. more documentation coming soon
